# 加载必要的库
library(readxl)
setwd("D:/6060")  # 设置工作目录，确保所有文件保存在指定路径
library(dplyr)
library(ggplot2)
library(forecast)
library(broom)
library(officer)
library(flextable)
library(tseries)  # 用于自相关性检验

# 读取数据集
data <- read_excel("D:/6060/6060.xlsx")
data <- data %>% mutate(Year = as.numeric(Year))  # 将年份转换为数值类型

# 检查数据中是否有重复行
num_duplicates <- sum(duplicated(data))  # 输出重复行的数量
print(paste("重复行数:", num_duplicates))

# 查看重复的行
if (num_duplicates > 0) {
  print("重复的行:")
  print(data[duplicated(data), ])
}

# 选择相关的外生变量
selected_variables <- c("GDP($/capita)", "Mean Temperature(deg.C)", "Mean Relative Humidity(%)", 
                        "Space Conditioning(Terajoule)", "Cooking", "Industrial Process/Equipment", 
                        "Lighting", "Refrigeration", "Hot Water")
data <- data[, c("Annual CO₂ emissions(t)", selected_variables)]

# 将数据转换为数值类型
data <- data %>% mutate_all(as.numeric)

# 数据清洗：处理缺失值
# 将缺失值统一填充为 0（可以根据需要更改填充值）
data[is.na(data)] <- 0

# 数据归一化到 [0, 1] 范围
normalize <- function(x) {
  return((x - min(x)) / (max(x) - min(x)))
}
data_normalized <- as.data.frame(lapply(data, function(column) {
  if (is.numeric(column)) {
    normalize(column)
  } else {
    column  # 保持非数值列不变
  }
}))

# 保存归一化后的数据到Excel
library(openxlsx)
write.xlsx(data_normalized, "D:/6060/6060_normalized.xlsx")

# 共线性诊断（阶段1：共线性分析的VIF结果）
write.xlsx(vif_df, "D:/6060/vif_results.xlsx")
doc <- body_add_flextable(doc, vif_table)

# 一阶差分（阶段4：差分后的数据）
data_diff <- data.frame(data_diff)
write.xlsx(data_diff, "D:/6060/differenced_data.xlsx")  # 转换为数据框格式

# 绘制差分后的序列并保存为一个合并的图像
png(filename = "D:/6060/differenced_series_combined.png", width = 1200, height = 800, units = "px")  # 修复文件输出
par(mfrow = c(3, 4))  # 设置布局以便将所有图放在一张图中
for (i in 1:ncol(data_diff)) {
  plot(data_diff[, i], type='l', main=colnames(data_diff)[i], xlab='Year', ylab=colnames(data_diff)[i])
}
dev.off()  # 关闭图形设备，保存图像

# 检查文件是否成功保存
if (file.exists("D:/6060/differenced_series_combined.png")) {
  print("差分后的序列图已成功保存.")
} else {
  print("未能成功保存差分后的序列图.")
}

# 将数据分为训练集和测试集
train_size <- floor(0.85 * nrow(data_diff))  # 计算训练集大小
traindata <- data_diff[1:train_size, ]  # 训练集数据
testdata <- data_diff[(train_size + 1):nrow(data_diff), ]  # 测试集数据

# 自相关性检验并保存ACF图
png(filename = "D:/6060/acf_plot.png", width = 800, height = 600, units = "px")
acf(traindata[, 1], main = "自相关函数 (ACF) 图")
dev.off()

# 检查ACF图是否成功保存
if (file.exists("D:/6060/acf_plot.png")) {
  print("自相关函数图已成功保存.")
} else {
  print("未能成功保存自相关函数图.")
}

# 使用最佳 (p, d, q) 构建ARIMAX模型
best_aic <- Inf
best_order <- c(0, 0, 0)

for (p in 0:1) {  # 降低最大阶数以减少模型复杂度
  for (d in 0:1) {
    for (q in 0:1) {  # 降低最大阶数以减少模型复杂度
      try({
        fit <- auto.arima(traindata[,1], xreg = as.matrix(traindata[, -1]), d = d, max.p = p, max.q = q, seasonal = FALSE, stepwise = TRUE, approximation = TRUE)
        if (fit$aic < best_aic) {
          best_aic <- fit$aic
          best_order <- c(p, d, q)
        }
      }, silent = TRUE)
    }
  }
}

print(paste("最佳模型阶数: AR =", best_order[1], "D =", best_order[2], "MA =", best_order[3]))

# 构建最终ARIMAX模型（包括所有变量）
final_fit <- auto.arima(traindata[, 1], xreg = as.matrix(traindata[, -1]), d = best_order[2], max.p = best_order[1], max.q = best_order[3], seasonal = FALSE, stepwise = TRUE, approximation = TRUE)
summary(final_fit)  # 输出模型摘要

# 使用broom包创建包含系数、t值和p值的数据框（阶段2：模型系数、t值和p值）
print(coefficients_df)
write.xlsx(coefficients_df, "D:/6060/coefficients_results.xlsx")

# 将系数保存到Word文档
coef_table <- flextable(coefficients_df)
doc <- body_add_flextable(doc, coef_table)
doc <- body_add_par(doc, "\n模型残差诊断:", style = "heading 2")

# 将回归方程添加到Word文档
formula_string <- paste0("Y_t = ", round(coefficients_df$estimate[1], 4), " + ",
                        paste(paste0(round(coefficients_df$estimate[-1], 4), "*", coefficients_df$term[-1]), collapse = " + "))
doc <- body_add_par(doc, "时间序列回归方程:", style = "heading 2")
doc <- body_add_par(doc, formula_string, style = "Normal")

# 添加参数解释
parameter_explanation <- "\n参数解释:\n- 截距表示当所有预测变量为零时响应变量的基准水平。\n- 每个系数表示在保持其他预测变量不变的情况下，相应预测变量增加一个单位时响应变量的预期变化。"
doc <- body_add_par(doc, parameter_explanation, style = "Normal")

# 预测未来值（基于时间顺序进行预测）
future_forecast <- forecast(final_fit, xreg = as.matrix(testdata[, -1]), h = nrow(testdata), level = c(95))

# 对预测值进行反标准化
# 反标准化函数
denormalize <- function(x, mean_val, sd_val) {
  return(x * sd_val + mean_val)
}
original_mean <- mean(data$`Annual CO₂ emissions(t)`)
original_sd <- sd(data$`Annual CO₂ emissions(t)`)
future_forecast$mean <- denormalize(future_forecast$mean, original_mean, original_sd)
future_forecast$lower <- denormalize(future_forecast$lower, original_mean, original_sd)
future_forecast$upper <- denormalize(future_forecast$upper, original_mean, original_sd)

# 创建预测年份序列
start_year <- max(as.numeric(rownames(data))) + 1
forecast_years <- seq(start_year, length.out = length(future_forecast$mean))

# 将原始数据转换为数据框，以便 ggplot 使用
original_data_df <- data.frame(
  Year = as.numeric(rownames(data)),
  Emissions = data$`Annual CO₂ emissions(t)`
)

# 将预测数据转换为数据框
future_forecast_df <- data.frame(
  Year = forecast_years,
  Mean = future_forecast$mean,
  Lower = future_forecast$lower[, ifelse(ncol(future_forecast$lower) > 1, 2, 1)],
  Upper = future_forecast$upper[, ifelse(ncol(future_forecast$upper) > 1, 2, 1)]
)

# 绘制原始数据与预测数据并保存图像
forecast_plot <- ggplot() +
  geom_line(data = original_data_df, aes(x = Year, y = Emissions), color = 'blue', linewidth = 1) +
  geom_line(data = future_forecast_df, aes(x = Year, y = Mean), color = 'red', linetype = "dashed") +
  geom_ribbon(data = future_forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = 'blue', alpha = 0.15) +
  labs(title = "ARIMAX 预测与原始数据对比", x = "年份", y = "年CO₂排放量 (t)") +
  theme_minimal()

ggsave("D:/6060/forecast_vs_original.png", plot = forecast_plot, width = 12, height = 8, units = "in")  # 修复图像输出尺寸问题

# 检查预测图是否成功保存
if (file.exists("D:/6060/forecast_vs_original.png")) {
  print("预测图已成功保存.")
} else {
  print("未能成功保存预测图.")
}

# 将预测图添加到Word文档
if (file.exists("D:/6060/forecast_vs_original.png")) {
  doc <- body_add_par(doc, "\n预测图:", style = "heading 2")
  doc <- body_add_img(doc, src = "D:/6060/forecast_vs_original.png", width = 6, height = 4)
} else {
  print("预测图文件不存在，无法添加到Word文档中。")
}

# 将一阶差分序列图添加到Word文档
if (file.exists("D:/6060/differenced_series_combined.png")) {
  doc <- body_add_par(doc, "\n一阶差分序列图:", style = "heading 2")
  doc <- body_add_img(doc, src = "D:/6060/differenced_series_combined.png", width = 6, height = 4)
} else {
  print("差分序列图文件不存在，无法添加到Word文档中。")
}

# 将自相关性检验的图添加到Word文档
if (file.exists("D:/6060/acf_plot.png")) {
  doc <- body_add_par(doc, "\n自相关性检验图:", style = "heading 2")
  doc <- body_add_img(doc, src = "D:/6060/acf_plot.png", width = 6, height = 4)
} else {
  print("自相关性检验图文件不存在，无法添加到Word文档中。")
}

# 模型评估（阶段3：模型评估指标MAE和RMSE）
print(evaluation_df)
write.xlsx(evaluation_df, "D:/6060/evaluation_results.xlsx")

# 将评估指标添加到Word文档
# 将生成的Word文档保存
doc <- body_add_par(doc, "\n模型评估:", style = "heading 2")
eval_table <- flextable(evaluation_df)
doc <- body_add_flextable(doc, eval_table)
print(doc, target = "D:/6060/ARIMAX_model_summary.docx")

# 检查Word文件是否成功保存
if (file.exists("D:/6060/ARIMAX_model_summary.docx")) {
  print("Word文件已成功保存到 D:/6060/ARIMAX_model_summary.docx.")
} else {
  print("未能成功保存Word文件。")
}
